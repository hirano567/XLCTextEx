//	XLCTextEx_1.0x	:	PLibTextEx

//	PTransCharPreset.cpp
//
#include "stdafx.h"

NS_PLIB_TEXTEX_BEGIN

//======================================================================
//	Preset データ
//======================================================================
typedef	T_UCP	PTRANSCHARMAP[2];

//----------------------------------------------------------------------
//	ひらがな <-> カタカナ
//----------------------------------------------------------------------
PTRANSCHARMAP	HiraganaKatakana[]	=
{
	0x309D,	// HIRAGANA ITERATION MARK
	0x30FD,	// KATAKANA ITERATION MARK
	0x3042,	// HIRAGANA LETTER A
	0x30A2,	// KATAKANA LETTER A
	0x3070,	// HIRAGANA LETTER BA
	0x30D0,	// KATAKANA LETTER BA
	0x3079,	// HIRAGANA LETTER BE
	0x30D9,	// KATAKANA LETTER BE
	0x3073,	// HIRAGANA LETTER BI
	0x30D3,	// KATAKANA LETTER BI
	0x307C,	// HIRAGANA LETTER BO
	0x30DC,	// KATAKANA LETTER BO
	0x3076,	// HIRAGANA LETTER BU
	0x30D6,	// KATAKANA LETTER BU
	0x3060,	// HIRAGANA LETTER DA
	0x30C0,	// KATAKANA LETTER DA
	0x3067,	// HIRAGANA LETTER DE
	0x30C7,	// KATAKANA LETTER DE
	0x3062,	// HIRAGANA LETTER DI
	0x30C2,	// KATAKANA LETTER DI
	0x3069,	// HIRAGANA LETTER DO
	0x30C9,	// KATAKANA LETTER DO
	0x3065,	// HIRAGANA LETTER DU
	0x30C5,	// KATAKANA LETTER DU
	0x3048,	// HIRAGANA LETTER E
	0x30A8,	// KATAKANA LETTER E
	0x304C,	// HIRAGANA LETTER GA
	0x30AC,	// KATAKANA LETTER GA
	0x3052,	// HIRAGANA LETTER GE
	0x30B2,	// KATAKANA LETTER GE
	0x304E,	// HIRAGANA LETTER GI
	0x30AE,	// KATAKANA LETTER GI
	0x3054,	// HIRAGANA LETTER GO
	0x30B4,	// KATAKANA LETTER GO
	0x3050,	// HIRAGANA LETTER GU
	0x30B0,	// KATAKANA LETTER GU
	0x306F,	// HIRAGANA LETTER HA
	0x30CF,	// KATAKANA LETTER HA
	0x3078,	// HIRAGANA LETTER HE
	0x30D8,	// KATAKANA LETTER HE
	0x3072,	// HIRAGANA LETTER HI
	0x30D2,	// KATAKANA LETTER HI
	0x307B,	// HIRAGANA LETTER HO
	0x30DB,	// KATAKANA LETTER HO
	0x3075,	// HIRAGANA LETTER HU
	0x30D5,	// KATAKANA LETTER HU
	0x3044,	// HIRAGANA LETTER I
	0x30A4,	// KATAKANA LETTER I
	0x304B,	// HIRAGANA LETTER KA
	0x30AB,	// KATAKANA LETTER KA
	0x3051,	// HIRAGANA LETTER KE
	0x30B1,	// KATAKANA LETTER KE
	0x304D,	// HIRAGANA LETTER KI
	0x30AD,	// KATAKANA LETTER KI
	0x3053,	// HIRAGANA LETTER KO
	0x30B3,	// KATAKANA LETTER KO
	0x304F,	// HIRAGANA LETTER KU
	0x30AF,	// KATAKANA LETTER KU
	0x307E,	// HIRAGANA LETTER MA
	0x30DE,	// KATAKANA LETTER MA
	0x3081,	// HIRAGANA LETTER ME
	0x30E1,	// KATAKANA LETTER ME
	0x307F,	// HIRAGANA LETTER MI
	0x30DF,	// KATAKANA LETTER MI
	0x3082,	// HIRAGANA LETTER MO
	0x30E2,	// KATAKANA LETTER MO
	0x3080,	// HIRAGANA LETTER MU
	0x30E0,	// KATAKANA LETTER MU
	0x3093,	// HIRAGANA LETTER N
	0x30F3,	// KATAKANA LETTER N
	0x306A,	// HIRAGANA LETTER NA
	0x30CA,	// KATAKANA LETTER NA
	0x306D,	// HIRAGANA LETTER NE
	0x30CD,	// KATAKANA LETTER NE
	0x306B,	// HIRAGANA LETTER NI
	0x30CB,	// KATAKANA LETTER NI
	0x306E,	// HIRAGANA LETTER NO
	0x30CE,	// KATAKANA LETTER NO
	0x306C,	// HIRAGANA LETTER NU
	0x30CC,	// KATAKANA LETTER NU
	0x304A,	// HIRAGANA LETTER O
	0x30AA,	// KATAKANA LETTER O
	0x3071,	// HIRAGANA LETTER PA
	0x30D1,	// KATAKANA LETTER PA
	0x307A,	// HIRAGANA LETTER PE
	0x30DA,	// KATAKANA LETTER PE
	0x3074,	// HIRAGANA LETTER PI
	0x30D4,	// KATAKANA LETTER PI
	0x307D,	// HIRAGANA LETTER PO
	0x30DD,	// KATAKANA LETTER PO
	0x3077,	// HIRAGANA LETTER PU
	0x30D7,	// KATAKANA LETTER PU
	0x3089,	// HIRAGANA LETTER RA
	0x30E9,	// KATAKANA LETTER RA
	0x308C,	// HIRAGANA LETTER RE
	0x30EC,	// KATAKANA LETTER RE
	0x308A,	// HIRAGANA LETTER RI
	0x30EA,	// KATAKANA LETTER RI
	0x308D,	// HIRAGANA LETTER RO
	0x30ED,	// KATAKANA LETTER RO
	0x308B,	// HIRAGANA LETTER RU
	0x30EB,	// KATAKANA LETTER RU
	0x3055,	// HIRAGANA LETTER SA
	0x30B5,	// KATAKANA LETTER SA
	0x305B,	// HIRAGANA LETTER SE
	0x30BB,	// KATAKANA LETTER SE
	0x3057,	// HIRAGANA LETTER SI
	0x30B7,	// KATAKANA LETTER SI
	0x3041,	// HIRAGANA LETTER SMALL A
	0x30A1,	// KATAKANA LETTER SMALL A
	0x3047,	// HIRAGANA LETTER SMALL E
	0x30A7,	// KATAKANA LETTER SMALL E
	0x3043,	// HIRAGANA LETTER SMALL I
	0x30A3,	// KATAKANA LETTER SMALL I
	0x3095,	// HIRAGANA LETTER SMALL KA
	0x30F5,	// KATAKANA LETTER SMALL KA
	0x3096,	// HIRAGANA LETTER SMALL KE
	0x30F6,	// KATAKANA LETTER SMALL KE
	0x3049,	// HIRAGANA LETTER SMALL O
	0x30A9,	// KATAKANA LETTER SMALL O
	0x3063,	// HIRAGANA LETTER SMALL TU
	0x30C3,	// KATAKANA LETTER SMALL TU
	0x3045,	// HIRAGANA LETTER SMALL U
	0x30A5,	// KATAKANA LETTER SMALL U
	0x308E,	// HIRAGANA LETTER SMALL WA
	0x30EE,	// KATAKANA LETTER SMALL WA
	0x3083,	// HIRAGANA LETTER SMALL YA
	0x30E3,	// KATAKANA LETTER SMALL YA
	0x3087,	// HIRAGANA LETTER SMALL YO
	0x30E7,	// KATAKANA LETTER SMALL YO
	0x3085,	// HIRAGANA LETTER SMALL YU
	0x30E5,	// KATAKANA LETTER SMALL YU
	0x305D,	// HIRAGANA LETTER SO
	0x30BD,	// KATAKANA LETTER SO
	0x3059,	// HIRAGANA LETTER SU
	0x30B9,	// KATAKANA LETTER SU
	0x305F,	// HIRAGANA LETTER TA
	0x30BF,	// KATAKANA LETTER TA
	0x3066,	// HIRAGANA LETTER TE
	0x30C6,	// KATAKANA LETTER TE
	0x3061,	// HIRAGANA LETTER TI
	0x30C1,	// KATAKANA LETTER TI
	0x3068,	// HIRAGANA LETTER TO
	0x30C8,	// KATAKANA LETTER TO
	0x3064,	// HIRAGANA LETTER TU
	0x30C4,	// KATAKANA LETTER TU
	0x3046,	// HIRAGANA LETTER U
	0x30A6,	// KATAKANA LETTER U
	0x3094,	// HIRAGANA LETTER VU
	0x30F4,	// KATAKANA LETTER VU
	0x308F,	// HIRAGANA LETTER WA
	0x30EF,	// KATAKANA LETTER WA
	0x3091,	// HIRAGANA LETTER WE
	0x30F1,	// KATAKANA LETTER WE
	0x3090,	// HIRAGANA LETTER WI
	0x30F0,	// KATAKANA LETTER WI
	0x3092,	// HIRAGANA LETTER WO
	0x30F2,	// KATAKANA LETTER WO
	0x3084,	// HIRAGANA LETTER YA
	0x30E4,	// KATAKANA LETTER YA
	0x3088,	// HIRAGANA LETTER YO
	0x30E8,	// KATAKANA LETTER YO
	0x3086,	// HIRAGANA LETTER YU
	0x30E6,	// KATAKANA LETTER YU
	0x3056,	// HIRAGANA LETTER ZA
	0x30B6,	// KATAKANA LETTER ZA
	0x305C,	// HIRAGANA LETTER ZE
	0x30BC,	// KATAKANA LETTER ZE
	0x3058,	// HIRAGANA LETTER ZI
	0x30B8,	// KATAKANA LETTER ZI
	0x305E,	// HIRAGANA LETTER ZO
	0x30BE,	// KATAKANA LETTER ZO
	0x305A,	// HIRAGANA LETTER ZU
	0x30BA,	// KATAKANA LETTER ZU
	0x309E,	// HIRAGANA VOICED ITERATION MARK
	0x30FE,	// KATAKANA VOICED ITERATION MARK
};
int	nHiraganaKatakana	= sizeof(HiraganaKatakana) / sizeof(PTRANSCHARMAP);

//----------------------------------------------------------------------
//	全角 <-> 半角	(1a)	文字（カナ以外）
//----------------------------------------------------------------------
PTRANSCHARMAP	ZenkakuHankakuA[]	=
{
	0x3000,	// IDEOGRAPHIC SPACE
	0x0020,	// SPACE
	0xFF01,	// FULLWIDTH EXCLAMATION MARK
	0x0021,	// EXCLAMATION MARK
	0xFF02,	// FULLWIDTH QUOTATION MARK
	0x0022,	// QUOTATION MARK
	0xFF03,	// FULLWIDTH NUMBER SIGN
	0x0023,	// NUMBER SIGN
	0xFF04,	// FULLWIDTH DOLLAR SIGN
	0x0024,	// DOLLAR SIGN
	0xFF05,	// FULLWIDTH PERCENT SIGN
	0x0025,	// PERCENT SIGN
	0xFF06,	// FULLWIDTH AMPERSAND
	0x0026,	// AMPERSAND
	0xFF07,	// FULLWIDTH APOSTROPHE
	0x0027,	// APOSTROPHE
	0xFF08,	// FULLWIDTH LEFT PARENTHESIS
	0x0028,	// LEFT PARENTHESIS
	0xFF09,	// FULLWIDTH RIGHT PARENTHESIS
	0x0029,	// RIGHT PARENTHESIS
	0xFF0A,	// FULLWIDTH ASTERISK
	0x002A,	// ASTERISK
	0xFF0B,	// FULLWIDTH PLUS SIGN
	0x002B,	// PLUS SIGN
	0xFF0C,	// FULLWIDTH COMMA
	0x002C,	// COMMA
	0xFF0D,	// FULLWIDTH HYPHEN-MINUS
	0x002D,	// HYPHEN-MINUS
	0xFF0E,	// FULLWIDTH FULL STOP
	0x002E,	// FULL STOP
	0xFF0F,	// FULLWIDTH SOLIDUS
	0x002F,	// SOLIDUS
	0xFF10,	// FULLWIDTH DIGIT ZERO
	0x0030,	// DIGIT ZERO
	0xFF11,	// FULLWIDTH DIGIT ONE
	0x0031,	// DIGIT ONE
	0xFF12,	// FULLWIDTH DIGIT TWO
	0x0032,	// DIGIT TWO
	0xFF13,	// FULLWIDTH DIGIT THREE
	0x0033,	// DIGIT THREE
	0xFF14,	// FULLWIDTH DIGIT FOUR
	0x0034,	// DIGIT FOUR
	0xFF15,	// FULLWIDTH DIGIT FIVE
	0x0035,	// DIGIT FIVE
	0xFF16,	// FULLWIDTH DIGIT SIX
	0x0036,	// DIGIT SIX
	0xFF17,	// FULLWIDTH DIGIT SEVEN
	0x0037,	// DIGIT SEVEN
	0xFF18,	// FULLWIDTH DIGIT EIGHT
	0x0038,	// DIGIT EIGHT
	0xFF19,	// FULLWIDTH DIGIT NINE
	0x0039,	// DIGIT NINE
	0xFF1A,	// FULLWIDTH COLON
	0x003A,	// COLON
	0xFF1B,	// FULLWIDTH SEMICOLON
	0x003B,	// SEMICOLON
	0xFF1C,	// FULLWIDTH LESS-THAN SIGN
	0x003C,	// LESS-THAN SIGN
	0xFF1D,	// FULLWIDTH EQUALS SIGN
	0x003D,	// EQUALS SIGN
	0xFF1E,	// FULLWIDTH GREATER-THAN SIGN
	0x003E,	// GREATER-THAN SIGN
	0xFF1F,	// FULLWIDTH QUESTION MARK
	0x003F,	// QUESTION MARK
	0xFF20,	// FULLWIDTH COMMERCIAL AT
	0x0040,	// COMMERCIAL AT
	0xFF21,	// FULLWIDTH LATIN CAPITAL LETTER A
	0x0041,	// LATIN CAPITAL LETTER A
	0xFF22,	// FULLWIDTH LATIN CAPITAL LETTER B
	0x0042,	// LATIN CAPITAL LETTER B
	0xFF23,	// FULLWIDTH LATIN CAPITAL LETTER C
	0x0043,	// LATIN CAPITAL LETTER C
	0xFF24,	// FULLWIDTH LATIN CAPITAL LETTER D
	0x0044,	// LATIN CAPITAL LETTER D
	0xFF25,	// FULLWIDTH LATIN CAPITAL LETTER E
	0x0045,	// LATIN CAPITAL LETTER E
	0xFF26,	// FULLWIDTH LATIN CAPITAL LETTER F
	0x0046,	// LATIN CAPITAL LETTER F
	0xFF27,	// FULLWIDTH LATIN CAPITAL LETTER G
	0x0047,	// LATIN CAPITAL LETTER G
	0xFF28,	// FULLWIDTH LATIN CAPITAL LETTER H
	0x0048,	// LATIN CAPITAL LETTER H
	0xFF29,	// FULLWIDTH LATIN CAPITAL LETTER I
	0x0049,	// LATIN CAPITAL LETTER I
	0xFF2A,	// FULLWIDTH LATIN CAPITAL LETTER J
	0x004A,	// LATIN CAPITAL LETTER J
	0xFF2B,	// FULLWIDTH LATIN CAPITAL LETTER K
	0x004B,	// LATIN CAPITAL LETTER K
	0xFF2C,	// FULLWIDTH LATIN CAPITAL LETTER L
	0x004C,	// LATIN CAPITAL LETTER L
	0xFF2D,	// FULLWIDTH LATIN CAPITAL LETTER M
	0x004D,	// LATIN CAPITAL LETTER M
	0xFF2E,	// FULLWIDTH LATIN CAPITAL LETTER N
	0x004E,	// LATIN CAPITAL LETTER N
	0xFF2F,	// FULLWIDTH LATIN CAPITAL LETTER O
	0x004F,	// LATIN CAPITAL LETTER O
	0xFF30,	// FULLWIDTH LATIN CAPITAL LETTER P
	0x0050,	// LATIN CAPITAL LETTER P
	0xFF31,	// FULLWIDTH LATIN CAPITAL LETTER Q
	0x0051,	// LATIN CAPITAL LETTER Q
	0xFF32,	// FULLWIDTH LATIN CAPITAL LETTER R
	0x0052,	// LATIN CAPITAL LETTER R
	0xFF33,	// FULLWIDTH LATIN CAPITAL LETTER S
	0x0053,	// LATIN CAPITAL LETTER S
	0xFF34,	// FULLWIDTH LATIN CAPITAL LETTER T
	0x0054,	// LATIN CAPITAL LETTER T
	0xFF35,	// FULLWIDTH LATIN CAPITAL LETTER U
	0x0055,	// LATIN CAPITAL LETTER U
	0xFF36,	// FULLWIDTH LATIN CAPITAL LETTER V
	0x0056,	// LATIN CAPITAL LETTER V
	0xFF37,	// FULLWIDTH LATIN CAPITAL LETTER W
	0x0057,	// LATIN CAPITAL LETTER W
	0xFF38,	// FULLWIDTH LATIN CAPITAL LETTER X
	0x0058,	// LATIN CAPITAL LETTER X
	0xFF39,	// FULLWIDTH LATIN CAPITAL LETTER Y
	0x0059,	// LATIN CAPITAL LETTER Y
	0xFF3A,	// FULLWIDTH LATIN CAPITAL LETTER Z
	0x005A,	// LATIN CAPITAL LETTER Z
	0xFF3B,	// FULLWIDTH LEFT SQUARE BRACKET
	0x005B,	// LEFT SQUARE BRACKET
	0xFF3C,	// FULLWIDTH REVERSE SOLIDUS
	0x005C,	// REVERSE SOLIDUS
	0xFF3D,	// FULLWIDTH RIGHT SQUARE BRACKET
	0x005D,	// RIGHT SQUARE BRACKET
	0xFF3E,	// FULLWIDTH CIRCUMFLEX ACCENT
	0x005E,	// CIRCUMFLEX ACCENT
	0xFF3F,	// FULLWIDTH LOW LINE
	0x005F,	// LOW LINE
	0xFF40,	// FULLWIDTH GRAVE ACCENT
	0x0060,	// GRAVE ACCENT
	0xFF41,	// FULLWIDTH LATIN SMALL LETTER A
	0x0061,	// LATIN SMALL LETTER A
	0xFF42,	// FULLWIDTH LATIN SMALL LETTER B
	0x0062,	// LATIN SMALL LETTER B
	0xFF43,	// FULLWIDTH LATIN SMALL LETTER C
	0x0063,	// LATIN SMALL LETTER C
	0xFF44,	// FULLWIDTH LATIN SMALL LETTER D
	0x0064,	// LATIN SMALL LETTER D
	0xFF45,	// FULLWIDTH LATIN SMALL LETTER E
	0x0065,	// LATIN SMALL LETTER E
	0xFF46,	// FULLWIDTH LATIN SMALL LETTER F
	0x0066,	// LATIN SMALL LETTER F
	0xFF47,	// FULLWIDTH LATIN SMALL LETTER G
	0x0067,	// LATIN SMALL LETTER G
	0xFF48,	// FULLWIDTH LATIN SMALL LETTER H
	0x0068,	// LATIN SMALL LETTER H
	0xFF49,	// FULLWIDTH LATIN SMALL LETTER I
	0x0069,	// LATIN SMALL LETTER I
	0xFF4A,	// FULLWIDTH LATIN SMALL LETTER J
	0x006A,	// LATIN SMALL LETTER J
	0xFF4B,	// FULLWIDTH LATIN SMALL LETTER K
	0x006B,	// LATIN SMALL LETTER K
	0xFF4C,	// FULLWIDTH LATIN SMALL LETTER L
	0x006C,	// LATIN SMALL LETTER L
	0xFF4D,	// FULLWIDTH LATIN SMALL LETTER M
	0x006D,	// LATIN SMALL LETTER M
	0xFF4E,	// FULLWIDTH LATIN SMALL LETTER N
	0x006E,	// LATIN SMALL LETTER N
	0xFF4F,	// FULLWIDTH LATIN SMALL LETTER O
	0x006F,	// LATIN SMALL LETTER O
	0xFF50,	// FULLWIDTH LATIN SMALL LETTER P
	0x0070,	// LATIN SMALL LETTER P
	0xFF51,	// FULLWIDTH LATIN SMALL LETTER Q
	0x0071,	// LATIN SMALL LETTER Q
	0xFF52,	// FULLWIDTH LATIN SMALL LETTER R
	0x0072,	// LATIN SMALL LETTER R
	0xFF53,	// FULLWIDTH LATIN SMALL LETTER S
	0x0073,	// LATIN SMALL LETTER S
	0xFF54,	// FULLWIDTH LATIN SMALL LETTER T
	0x0074,	// LATIN SMALL LETTER T
	0xFF55,	// FULLWIDTH LATIN SMALL LETTER U
	0x0075,	// LATIN SMALL LETTER U
	0xFF56,	// FULLWIDTH LATIN SMALL LETTER V
	0x0076,	// LATIN SMALL LETTER V
	0xFF57,	// FULLWIDTH LATIN SMALL LETTER W
	0x0077,	// LATIN SMALL LETTER W
	0xFF58,	// FULLWIDTH LATIN SMALL LETTER X
	0x0078,	// LATIN SMALL LETTER X
	0xFF59,	// FULLWIDTH LATIN SMALL LETTER Y
	0x0079,	// LATIN SMALL LETTER Y
	0xFF5A,	// FULLWIDTH LATIN SMALL LETTER Z
	0x007A,	// LATIN SMALL LETTER Z
	0xFF5B,	// FULLWIDTH LEFT CURLY BRACKET
	0x007B,	// LEFT CURLY BRACKET
	0xFF5C,	// FULLWIDTH VERTICAL LINE
	0x007C,	// VERTICAL LINE
	0xFF5D,	// FULLWIDTH RIGHT CURLY BRACKET
	0x007D,	// RIGHT CURLY BRACKET
	0xFF5E,	// FULLWIDTH TILDE
	0x007E,	// TILDE
	0xFF5F,	// FULLWIDTH LEFT WHITE PARENTHESIS
	0x2985,	// LEFT WHITE PARENTHESIS
	0xFF60,	// FULLWIDTH RIGHT WHITE PARENTHESIS
	0x2986,	// RIGHT WHITE PARENTHESIS
	0xFFE0,	// FULLWIDTH CENT SIGN
	0x00A2,	// CENT SIGN
	0xFFE1,	// FULLWIDTH POUND SIGN
	0x00A3,	// POUND SIGN
	0xFFE2,	// FULLWIDTH NOT SIGN
	0x00AC,	// NOT SIGN
	0xFFE3,	// FULLWIDTH MACRON
	0x00AF,	// MACRON
	0xFFE4,	// FULLWIDTH BROKEN BAR
	0x00A6,	// BROKEN BAR
	0xFFE5,	// FULLWIDTH YEN SIGN
	0x00A5,	// YEN SIGN
	0xFFE6,	// FULLWIDTH WON SIGN
	0x20A9,	// WON SIGN
	0x25A0,	// BLACK SQUARE
	0xFFED,	// HALFWIDTH BLACK SQUARE
	0x2193,	// DOWNWARDS ARROW
	0xFFEC,	// HALFWIDTH DOWNWARDS ARROW
	0x2502,	// BOX DRAWINGS LIGHT VERTICAL
	0xFFE8,	// HALFWIDTH FORMS LIGHT VERTICAL
	//0x3001,	// IDEOGRAPHIC COMMA
	//0xFF64,	// HALFWIDTH IDEOGRAPHIC COMMA
	//0x3002,	// IDEOGRAPHIC FULL STOP
	//0xFF61,	// HALFWIDTH IDEOGRAPHIC FULL STOP
	//0x30A2,	// KATAKANA LETTER A
	//0xFF71,	// HALFWIDTH KATAKANA LETTER A
	//0x30A8,	// KATAKANA LETTER E
	//0xFF74,	// HALFWIDTH KATAKANA LETTER E
	//0x30CF,	// KATAKANA LETTER HA
	//0xFF8A,	// HALFWIDTH KATAKANA LETTER HA
	//0x30D8,	// KATAKANA LETTER HE
	//0xFF8D,	// HALFWIDTH KATAKANA LETTER HE
	//0x30D2,	// KATAKANA LETTER HI
	//0xFF8B,	// HALFWIDTH KATAKANA LETTER HI
	//0x30DB,	// KATAKANA LETTER HO
	//0xFF8E,	// HALFWIDTH KATAKANA LETTER HO
	//0x30D5,	// KATAKANA LETTER HU
	//0xFF8C,	// HALFWIDTH KATAKANA LETTER HU
	//0x30A4,	// KATAKANA LETTER I
	//0xFF72,	// HALFWIDTH KATAKANA LETTER I
	//0x30AB,	// KATAKANA LETTER KA
	//0xFF76,	// HALFWIDTH KATAKANA LETTER KA
	//0x30B1,	// KATAKANA LETTER KE
	//0xFF79,	// HALFWIDTH KATAKANA LETTER KE
	//0x30AD,	// KATAKANA LETTER KI
	//0xFF77,	// HALFWIDTH KATAKANA LETTER KI
	//0x30B3,	// KATAKANA LETTER KO
	//0xFF7A,	// HALFWIDTH KATAKANA LETTER KO
	//0x30AF,	// KATAKANA LETTER KU
	//0xFF78,	// HALFWIDTH KATAKANA LETTER KU
	//0x30DE,	// KATAKANA LETTER MA
	//0xFF8F,	// HALFWIDTH KATAKANA LETTER MA
	//0x30E1,	// KATAKANA LETTER ME
	//0xFF92,	// HALFWIDTH KATAKANA LETTER ME
	//0x30DF,	// KATAKANA LETTER MI
	//0xFF90,	// HALFWIDTH KATAKANA LETTER MI
	//0x30E2,	// KATAKANA LETTER MO
	//0xFF93,	// HALFWIDTH KATAKANA LETTER MO
	//0x30E0,	// KATAKANA LETTER MU
	//0xFF91,	// HALFWIDTH KATAKANA LETTER MU
	//0x30F3,	// KATAKANA LETTER N
	//0xFF9D,	// HALFWIDTH KATAKANA LETTER N
	//0x30CA,	// KATAKANA LETTER NA
	//0xFF85,	// HALFWIDTH KATAKANA LETTER NA
	//0x30CD,	// KATAKANA LETTER NE
	//0xFF88,	// HALFWIDTH KATAKANA LETTER NE
	//0x30CB,	// KATAKANA LETTER NI
	//0xFF86,	// HALFWIDTH KATAKANA LETTER NI
	//0x30CE,	// KATAKANA LETTER NO
	//0xFF89,	// HALFWIDTH KATAKANA LETTER NO
	//0x30CC,	// KATAKANA LETTER NU
	//0xFF87,	// HALFWIDTH KATAKANA LETTER NU
	//0x30AA,	// KATAKANA LETTER O
	//0xFF75,	// HALFWIDTH KATAKANA LETTER O
	//0x30E9,	// KATAKANA LETTER RA
	//0xFF97,	// HALFWIDTH KATAKANA LETTER RA
	//0x30EC,	// KATAKANA LETTER RE
	//0xFF9A,	// HALFWIDTH KATAKANA LETTER RE
	//0x30EA,	// KATAKANA LETTER RI
	//0xFF98,	// HALFWIDTH KATAKANA LETTER RI
	//0x30ED,	// KATAKANA LETTER RO
	//0xFF9B,	// HALFWIDTH KATAKANA LETTER RO
	//0x30EB,	// KATAKANA LETTER RU
	//0xFF99,	// HALFWIDTH KATAKANA LETTER RU
	//0x30B5,	// KATAKANA LETTER SA
	//0xFF7B,	// HALFWIDTH KATAKANA LETTER SA
	//0x30BB,	// KATAKANA LETTER SE
	//0xFF7E,	// HALFWIDTH KATAKANA LETTER SE
	//0x30B7,	// KATAKANA LETTER SI
	//0xFF7C,	// HALFWIDTH KATAKANA LETTER SI
	//0x30A1,	// KATAKANA LETTER SMALL A
	//0xFF67,	// HALFWIDTH KATAKANA LETTER SMALL A
	//0x30A7,	// KATAKANA LETTER SMALL E
	//0xFF6A,	// HALFWIDTH KATAKANA LETTER SMALL E
	//0x30A3,	// KATAKANA LETTER SMALL I
	//0xFF68,	// HALFWIDTH KATAKANA LETTER SMALL I
	//0x30A9,	// KATAKANA LETTER SMALL O
	//0xFF6B,	// HALFWIDTH KATAKANA LETTER SMALL O
	//0x30C3,	// KATAKANA LETTER SMALL TU
	//0xFF6F,	// HALFWIDTH KATAKANA LETTER SMALL TU
	//0x30A5,	// KATAKANA LETTER SMALL U
	//0xFF69,	// HALFWIDTH KATAKANA LETTER SMALL U
	//0x30E3,	// KATAKANA LETTER SMALL YA
	//0xFF6C,	// HALFWIDTH KATAKANA LETTER SMALL YA
	//0x30E7,	// KATAKANA LETTER SMALL YO
	//0xFF6E,	// HALFWIDTH KATAKANA LETTER SMALL YO
	//0x30E5,	// KATAKANA LETTER SMALL YU
	//0xFF6D,	// HALFWIDTH KATAKANA LETTER SMALL YU
	//0x30BD,	// KATAKANA LETTER SO
	//0xFF7F,	// HALFWIDTH KATAKANA LETTER SO
	//0x30B9,	// KATAKANA LETTER SU
	//0xFF7D,	// HALFWIDTH KATAKANA LETTER SU
	//0x30BF,	// KATAKANA LETTER TA
	//0xFF80,	// HALFWIDTH KATAKANA LETTER TA
	//0x30C6,	// KATAKANA LETTER TE
	//0xFF83,	// HALFWIDTH KATAKANA LETTER TE
	//0x30C1,	// KATAKANA LETTER TI
	//0xFF81,	// HALFWIDTH KATAKANA LETTER TI
	//0x30C8,	// KATAKANA LETTER TO
	//0xFF84,	// HALFWIDTH KATAKANA LETTER TO
	//0x30C4,	// KATAKANA LETTER TU
	//0xFF82,	// HALFWIDTH KATAKANA LETTER TU
	//0x30A6,	// KATAKANA LETTER U
	//0xFF73,	// HALFWIDTH KATAKANA LETTER U
	//0x30EF,	// KATAKANA LETTER WA
	//0xFF9C,	// HALFWIDTH KATAKANA LETTER WA
	//0x30F2,	// KATAKANA LETTER WO
	//0xFF66,	// HALFWIDTH KATAKANA LETTER WO
	//0x30E4,	// KATAKANA LETTER YA
	//0xFF94,	// HALFWIDTH KATAKANA LETTER YA
	//0x30E8,	// KATAKANA LETTER YO
	//0xFF96,	// HALFWIDTH KATAKANA LETTER YO
	//0x30E6,	// KATAKANA LETTER YU
	//0xFF95,	// HALFWIDTH KATAKANA LETTER YU
	//0x30FB,	// KATAKANA MIDDLE DOT
	//0xFF65,	// HALFWIDTH KATAKANA MIDDLE DOT
	//0x309C,	// KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
	//0xFF9F,	// HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
	//0x309B,	// KATAKANA-HIRAGANA VOICED SOUND MARK
	//0xFF9E,	// HALFWIDTH KATAKANA VOICED SOUND MARK
	//0x30FC,	// KATAKANA-HIRAGANA PROLONGED SOUND MARK
	//0xFF70,	// HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK
	//0x300C,	// LEFT CORNER BRACKET
	//0xFF62,	// HALFWIDTH LEFT CORNER BRACKET
	0x2190,	// LEFTWARDS ARROW
	0xFFE9,	// HALFWIDTH LEFTWARDS ARROW
	//0x300D,	// RIGHT CORNER BRACKET
	//0xFF63,	// HALFWIDTH RIGHT CORNER BRACKET
	0x2192,	// RIGHTWARDS ARROW
	0xFFEB,	// HALFWIDTH RIGHTWARDS ARROW
	0x2191,	// UPWARDS ARROW
	0xFFEA,	// HALFWIDTH UPWARDS ARROW
	0x25CB,	// WHITE CIRCLE
	0xFFEE,	// HALFWIDTH WHITE CIRCLE

	//0x3099,	// COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK
	//0xFF9E,	// HALFWIDTH KATAKANA VOICED SOUND MARK
	//0x309A,	// COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
	//0xFF9F,	// HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
};
int	nZenkakuHankakuA	= sizeof(ZenkakuHankakuA) / sizeof(PTRANSCHARMAP);

//----------------------------------------------------------------------
//	全角 <-> 半角	(1k)	文字（カナ）
//----------------------------------------------------------------------
PTRANSCHARMAP	ZenkakuHankakuK[]	=
{
	0x3001,	// IDEOGRAPHIC COMMA
	0xFF64,	// HALFWIDTH IDEOGRAPHIC COMMA
	0x3002,	// IDEOGRAPHIC FULL STOP
	0xFF61,	// HALFWIDTH IDEOGRAPHIC FULL STOP
	0x30A2,	// KATAKANA LETTER A
	0xFF71,	// HALFWIDTH KATAKANA LETTER A
	0x30A8,	// KATAKANA LETTER E
	0xFF74,	// HALFWIDTH KATAKANA LETTER E
	0x30CF,	// KATAKANA LETTER HA
	0xFF8A,	// HALFWIDTH KATAKANA LETTER HA
	0x30D8,	// KATAKANA LETTER HE
	0xFF8D,	// HALFWIDTH KATAKANA LETTER HE
	0x30D2,	// KATAKANA LETTER HI
	0xFF8B,	// HALFWIDTH KATAKANA LETTER HI
	0x30DB,	// KATAKANA LETTER HO
	0xFF8E,	// HALFWIDTH KATAKANA LETTER HO
	0x30D5,	// KATAKANA LETTER HU
	0xFF8C,	// HALFWIDTH KATAKANA LETTER HU
	0x30A4,	// KATAKANA LETTER I
	0xFF72,	// HALFWIDTH KATAKANA LETTER I
	0x30AB,	// KATAKANA LETTER KA
	0xFF76,	// HALFWIDTH KATAKANA LETTER KA
	0x30B1,	// KATAKANA LETTER KE
	0xFF79,	// HALFWIDTH KATAKANA LETTER KE
	0x30AD,	// KATAKANA LETTER KI
	0xFF77,	// HALFWIDTH KATAKANA LETTER KI
	0x30B3,	// KATAKANA LETTER KO
	0xFF7A,	// HALFWIDTH KATAKANA LETTER KO
	0x30AF,	// KATAKANA LETTER KU
	0xFF78,	// HALFWIDTH KATAKANA LETTER KU
	0x30DE,	// KATAKANA LETTER MA
	0xFF8F,	// HALFWIDTH KATAKANA LETTER MA
	0x30E1,	// KATAKANA LETTER ME
	0xFF92,	// HALFWIDTH KATAKANA LETTER ME
	0x30DF,	// KATAKANA LETTER MI
	0xFF90,	// HALFWIDTH KATAKANA LETTER MI
	0x30E2,	// KATAKANA LETTER MO
	0xFF93,	// HALFWIDTH KATAKANA LETTER MO
	0x30E0,	// KATAKANA LETTER MU
	0xFF91,	// HALFWIDTH KATAKANA LETTER MU
	0x30F3,	// KATAKANA LETTER N
	0xFF9D,	// HALFWIDTH KATAKANA LETTER N
	0x30CA,	// KATAKANA LETTER NA
	0xFF85,	// HALFWIDTH KATAKANA LETTER NA
	0x30CD,	// KATAKANA LETTER NE
	0xFF88,	// HALFWIDTH KATAKANA LETTER NE
	0x30CB,	// KATAKANA LETTER NI
	0xFF86,	// HALFWIDTH KATAKANA LETTER NI
	0x30CE,	// KATAKANA LETTER NO
	0xFF89,	// HALFWIDTH KATAKANA LETTER NO
	0x30CC,	// KATAKANA LETTER NU
	0xFF87,	// HALFWIDTH KATAKANA LETTER NU
	0x30AA,	// KATAKANA LETTER O
	0xFF75,	// HALFWIDTH KATAKANA LETTER O
	0x30E9,	// KATAKANA LETTER RA
	0xFF97,	// HALFWIDTH KATAKANA LETTER RA
	0x30EC,	// KATAKANA LETTER RE
	0xFF9A,	// HALFWIDTH KATAKANA LETTER RE
	0x30EA,	// KATAKANA LETTER RI
	0xFF98,	// HALFWIDTH KATAKANA LETTER RI
	0x30ED,	// KATAKANA LETTER RO
	0xFF9B,	// HALFWIDTH KATAKANA LETTER RO
	0x30EB,	// KATAKANA LETTER RU
	0xFF99,	// HALFWIDTH KATAKANA LETTER RU
	0x30B5,	// KATAKANA LETTER SA
	0xFF7B,	// HALFWIDTH KATAKANA LETTER SA
	0x30BB,	// KATAKANA LETTER SE
	0xFF7E,	// HALFWIDTH KATAKANA LETTER SE
	0x30B7,	// KATAKANA LETTER SI
	0xFF7C,	// HALFWIDTH KATAKANA LETTER SI
	0x30A1,	// KATAKANA LETTER SMALL A
	0xFF67,	// HALFWIDTH KATAKANA LETTER SMALL A
	0x30A7,	// KATAKANA LETTER SMALL E
	0xFF6A,	// HALFWIDTH KATAKANA LETTER SMALL E
	0x30A3,	// KATAKANA LETTER SMALL I
	0xFF68,	// HALFWIDTH KATAKANA LETTER SMALL I
	0x30A9,	// KATAKANA LETTER SMALL O
	0xFF6B,	// HALFWIDTH KATAKANA LETTER SMALL O
	0x30C3,	// KATAKANA LETTER SMALL TU
	0xFF6F,	// HALFWIDTH KATAKANA LETTER SMALL TU
	0x30A5,	// KATAKANA LETTER SMALL U
	0xFF69,	// HALFWIDTH KATAKANA LETTER SMALL U
	0x30E3,	// KATAKANA LETTER SMALL YA
	0xFF6C,	// HALFWIDTH KATAKANA LETTER SMALL YA
	0x30E7,	// KATAKANA LETTER SMALL YO
	0xFF6E,	// HALFWIDTH KATAKANA LETTER SMALL YO
	0x30E5,	// KATAKANA LETTER SMALL YU
	0xFF6D,	// HALFWIDTH KATAKANA LETTER SMALL YU
	0x30BD,	// KATAKANA LETTER SO
	0xFF7F,	// HALFWIDTH KATAKANA LETTER SO
	0x30B9,	// KATAKANA LETTER SU
	0xFF7D,	// HALFWIDTH KATAKANA LETTER SU
	0x30BF,	// KATAKANA LETTER TA
	0xFF80,	// HALFWIDTH KATAKANA LETTER TA
	0x30C6,	// KATAKANA LETTER TE
	0xFF83,	// HALFWIDTH KATAKANA LETTER TE
	0x30C1,	// KATAKANA LETTER TI
	0xFF81,	// HALFWIDTH KATAKANA LETTER TI
	0x30C8,	// KATAKANA LETTER TO
	0xFF84,	// HALFWIDTH KATAKANA LETTER TO
	0x30C4,	// KATAKANA LETTER TU
	0xFF82,	// HALFWIDTH KATAKANA LETTER TU
	0x30A6,	// KATAKANA LETTER U
	0xFF73,	// HALFWIDTH KATAKANA LETTER U
	0x30EF,	// KATAKANA LETTER WA
	0xFF9C,	// HALFWIDTH KATAKANA LETTER WA
	0x30F2,	// KATAKANA LETTER WO
	0xFF66,	// HALFWIDTH KATAKANA LETTER WO
	0x30E4,	// KATAKANA LETTER YA
	0xFF94,	// HALFWIDTH KATAKANA LETTER YA
	0x30E8,	// KATAKANA LETTER YO
	0xFF96,	// HALFWIDTH KATAKANA LETTER YO
	0x30E6,	// KATAKANA LETTER YU
	0xFF95,	// HALFWIDTH KATAKANA LETTER YU
	0x30FB,	// KATAKANA MIDDLE DOT
	0xFF65,	// HALFWIDTH KATAKANA MIDDLE DOT
	0x309C,	// KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
	0xFF9F,	// HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
	0x309B,	// KATAKANA-HIRAGANA VOICED SOUND MARK
	0xFF9E,	// HALFWIDTH KATAKANA VOICED SOUND MARK
	0x30FC,	// KATAKANA-HIRAGANA PROLONGED SOUND MARK
	0xFF70,	// HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK
	0x300C,	// LEFT CORNER BRACKET
	0xFF62,	// HALFWIDTH LEFT CORNER BRACKET
	0x300D,	// RIGHT CORNER BRACKET
	0xFF63,	// HALFWIDTH RIGHT CORNER BRACKET
	0x3099,	// COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK
	0xFF9E,	// HALFWIDTH KATAKANA VOICED SOUND MARK
	0x309A,	// COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
	0xFF9F,	// HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK
};
int	nZenkakuHankakuK	= sizeof(ZenkakuHankakuK) / sizeof(PTRANSCHARMAP);

//----------------------------------------------------------------------
//	全角 <-> 半角	(2)	文字列
//----------------------------------------------------------------------
/*
struct PSStrZenHan
{
	T_PCSTR_U	pZen;
	size_t		zZen;
	T_PCSTR_U	pHan;
	size_t		zHan;
};

PSStrZenHan	StrZenkakuHankaku[]	=
{
	TQU("ガ"),	1,	TQU("ｶﾞ"),	2,
	TQU("ギ"),	1,	TQU("ｷﾞ"),	2,
	TQU("グ"),	1,	TQU("ｸﾞ"),	2,
	TQU("ゲ"),	1,	TQU("ｹﾞ"),	2,
	TQU("ゴ"),	1,	TQU("ｺﾞ"),	2,
	TQU("ザ"),	1,	TQU("ｻﾞ"),	2,
	TQU("ジ"),	1,	TQU("ｼﾞ"),	2,
	TQU("ズ"),	1,	TQU("ｽﾞ"),	2,
	TQU("ゼ"),	1,	TQU("ｾﾞ"),	2,
	TQU("ゾ"),	1,	TQU("ｿﾞ"),	2,
	TQU("ダ"),	1,	TQU("ﾀﾞ"),	2,
	TQU("ヂ"),	1,	TQU("ﾁﾞ"),	2,
	TQU("ヅ"),	1,	TQU("ﾂﾞ"),	2,
	TQU("デ"),	1,	TQU("ﾃﾞ"),	2,
	TQU("ド"),	1,	TQU("ﾄﾞ"),	2,
	TQU("バ"),	1,	TQU("ﾊﾞ"),	2,
	TQU("パ"),	1,	TQU("ﾊﾟ"),	2,
	TQU("ビ"),	1,	TQU("ﾋﾞ"),	2,
	TQU("ピ"),	1,	TQU("ﾋﾟ"),	2,
	TQU("ブ"),	1,	TQU("ﾌﾞ"),	2,
	TQU("プ"),	1,	TQU("ﾌﾟ"),	2,
	TQU("ベ"),	1,	TQU("ﾍﾞ"),	2,
	TQU("ペ"),	1,	TQU("ﾍﾟ"),	2,
	TQU("ボ"),	1,	TQU("ﾎﾞ"),	2,
	TQU("ポ"),	1,	TQU("ﾎﾟ"),	2,
	TQU("ヴ"),	1,	TQU("ｳﾞ"),	2,
};
int	nStrZenkakuHankaku	= sizeof(StrZenkakuHankaku) / sizeof(PSStrZenHan);
*/

T_UCP	uczZenGa[]	= { 0x30AC, 0, };
T_UCP	uczHanGa[]	= { 0xFF76, 0xFF9E, 0, };
T_UCP	uczZenGi[]	= { 0x30AE, 0, };
T_UCP	uczHanGi[]	= { 0xFF77, 0xFF9E, 0, };
T_UCP	uczZenGu[]	= { 0x30B0, 0, };
T_UCP	uczHanGu[]	= { 0xFF78, 0xFF9E, 0, };
T_UCP	uczZenGe[]	= { 0x30B2, 0, };
T_UCP	uczHanGe[]	= { 0xFF79, 0xFF9E, 0, };
T_UCP	uczZenGo[]	= { 0x30B4, 0, };
T_UCP	uczHanGo[]	= { 0xFF7A, 0xFF9E, 0, };
T_UCP	uczZenZa[]	= { 0x30B6, 0, };
T_UCP	uczHanZa[]	= { 0xFF7B, 0xFF9E, 0, };
T_UCP	uczZenZi[]	= { 0x30B8, 0, };
T_UCP	uczHanZi[]	= { 0xFF7C, 0xFF9E, 0, };
T_UCP	uczZenZu[]	= { 0x30BA, 0, };
T_UCP	uczHanzu[]	= { 0xFF7D, 0xFF9E, 0, };
T_UCP	uczZenZe[]	= { 0x30BC, 0, };
T_UCP	uczHanZe[]	= { 0xFF7E, 0xFF9E, 0, };
T_UCP	uczZenZo[]	= { 0x30BE, 0, };
T_UCP	uczHanZo[]	= { 0xFF7F, 0xFF9E, 0, };
T_UCP	uczZenDa[]	= { 0x30C0, 0, };
T_UCP	uczHanDa[]	= { 0xFF80, 0xFF9E, 0, };
T_UCP	uczZenDi[]	= { 0x30C2, 0, };
T_UCP	uczHanDi[]	= { 0xFF81, 0xFF9E, 0, };
T_UCP	uczZenDu[]	= { 0x30C5, 0, };
T_UCP	uczHanDu[]	= { 0xFF82, 0xFF9E, 0, };
T_UCP	uczZenDe[]	= { 0x30C7, 0, };
T_UCP	uczHanDe[]	= { 0xFF83, 0xFF9E, 0, };
T_UCP	uczZenDo[]	= { 0x30C9, 0, };
T_UCP	uczHanDo[]	= { 0xFF84, 0xFF9E, 0, };
T_UCP	uczZenBa[]	= { 0x30D0, 0, };
T_UCP	uczHanBa[]	= { 0xFF8A, 0xFF9E, 0, };
T_UCP	uczZenPa[]	= { 0x30D1, 0, };
T_UCP	uczHanPa[]	= { 0xFF8A, 0xFF9F, 0, };
T_UCP	uczZenBi[]	= { 0x30D3, 0, };
T_UCP	uczHanBi[]	= { 0xFF8B, 0xFF9E, 0, };
T_UCP	uczZenPi[]	= { 0x30D4, 0, };
T_UCP	uczHanPi[]	= { 0xFF8B, 0xFF9F, 0, };
T_UCP	uczZenBu[]	= { 0x30D6, 0, };
T_UCP	uczHanBu[]	= { 0xFF8C, 0xFF9E, 0, };
T_UCP	uczZenPu[]	= { 0x30D7, 0, };
T_UCP	uczHanPu[]	= { 0xFF8C, 0xFF9F, 0, };
T_UCP	uczZenBe[]	= { 0x30D9, 0, };
T_UCP	uczHanBe[]	= { 0xFF8D, 0xFF9E, 0, };
T_UCP	uczZenPe[]	= { 0x30DA, 0, };
T_UCP	uczHanPe[]	= { 0xFF8D, 0xFF9F, 0, };
T_UCP	uczZenBo[]	= { 0x30DC, 0, };
T_UCP	uczHanBo[]	= { 0xFF8E, 0xFF9E, 0, };
T_UCP	uczZenPo[]	= { 0x30DD, 0, };
T_UCP	uczHanPo[]	= { 0xFF8E, 0xFF9F, 0, };
T_UCP	uczZenVu[]	= { 0x30F4, 0, };
T_UCP	uczHanVu[]	= { 0xFF73, 0xFF9E, 0, };

typedef	const T_UCP*	(PUCZZenHanMap)[2];

PUCZZenHanMap	uczZenkakuHankaku[]	=
{
	uczZenGa,
	uczHanGa,
	uczZenGi,
	uczHanGi,
	uczZenGu,
	uczHanGu,
	uczZenGe,
	uczHanGe,
	uczZenGo,
	uczHanGo,
	uczZenZa,
	uczHanZa,
	uczZenZi,
	uczHanZi,
	uczZenZu,
	uczHanzu,
	uczZenZe,
	uczHanZe,
	uczZenZo,
	uczHanZo,
	uczZenDa,
	uczHanDa,
	uczZenDi,
	uczHanDi,
	uczZenDu,
	uczHanDu,
	uczZenDe,
	uczHanDe,
	uczZenDo,
	uczHanDo,
	uczZenBa,
	uczHanBa,
	uczZenPa,
	uczHanPa,
	uczZenBi,
	uczHanBi,
	uczZenPi,
	uczHanPi,
	uczZenBu,
	uczHanBu,
	uczZenPu,
	uczHanPu,
	uczZenBe,
	uczHanBe,
	uczZenPe,
	uczHanPe,
	uczZenBo,
	uczHanBo,
	uczZenPo,
	uczHanPo,
	uczZenVu,
	uczHanVu,
};
int	nuczZenkakuHankaku	= sizeof(uczZenkakuHankaku) / sizeof(PUCZZenHanMap);

//======================================================================
//	PCTransChar のインスタンス用変数と初期化
//======================================================================
PCTransChar*	pciHiraganaToKatakana	= NULL;
PCTransChar*	pciKatakanaToHiragana	= NULL;
PCTransChar*	pciZenkakuToHankaku		= NULL;
PCTransChar*	pciHankakuToZenkaku		= NULL;
PCTransChar*	pciHankakuToZenkakuKana	= NULL;
PCTransChar*	pciWidthFolding			= NULL;

//----------------------------------------------------------------------
//	InitHiraganakatakana()
//	例外は呼び出し側で処理すること。
//----------------------------------------------------------------------
void InitHiraganaToKatakana()
{
	int	i;

	if (pciHiraganaToKatakana != NULL)	return;
	pciHiraganaToKatakana	= new PCTransChar;

	for (i = 0; i < nHiraganaKatakana; ++i)
	{
		pciHiraganaToKatakana->AppendCpTrans(HiraganaKatakana[i][0], HiraganaKatakana[i][1]);
	}
}

//----------------------------------------------------------------------
//	InitKatakanaToHiragana()
//	例外は呼び出し側で処理すること。
//----------------------------------------------------------------------
void InitKatakanaToHiragana()
{
	int	i;

	if (pciKatakanaToHiragana != NULL)	return;
	pciKatakanaToHiragana	= new PCTransChar;

	for (i = 0; i < nHiraganaKatakana; ++i)
	{
		pciKatakanaToHiragana->AppendCpTrans(HiraganaKatakana[i][1], HiraganaKatakana[i][0]);
	}
}

//----------------------------------------------------------------------
//	InitZenkakuToHankaku()
//	例外は呼び出し側で処理すること。
//----------------------------------------------------------------------
void InitZenkakuToHankaku()
{
	int	i;

	if (pciZenkakuToHankaku != NULL)	return;
	pciZenkakuToHankaku	= new PCTransChar;

	for (i = 0; i < nZenkakuHankakuA; ++i)
	{
		pciZenkakuToHankaku->AppendCpTrans(ZenkakuHankakuA[i][0], ZenkakuHankakuA[i][1]);
	}

	for (i = 0; i < nZenkakuHankakuK; ++i)
	{
		pciZenkakuToHankaku->AppendCpTrans(ZenkakuHankakuK[i][0], ZenkakuHankakuK[i][1]);
	}

	for (i = 0; i < nuczZenkakuHankaku; ++i)
	{
		pciZenkakuToHankaku->AppendStrTrans(
			uczZenkakuHankaku[i][0],
			uczZenkakuHankaku[i][1]
			);
	}
}

//----------------------------------------------------------------------
//	InitHankakuToZenkaku()
//	例外は呼び出し側で処理すること。
//----------------------------------------------------------------------
void InitHankakuToZenkaku()
{
	int	i;

	if (pciHankakuToZenkaku != NULL)	return;
	pciHankakuToZenkaku	= new PCTransChar;

	for (i = 0; i < nZenkakuHankakuA; ++i)
	{
		pciHankakuToZenkaku->AppendCpTrans(ZenkakuHankakuA[i][1], ZenkakuHankakuA[i][0]);
	}

	for (i = 0; i < nZenkakuHankakuK; ++i)
	{
		pciHankakuToZenkaku->AppendCpTrans(ZenkakuHankakuK[i][1], ZenkakuHankakuK[i][0]);
	}

	for (i = 0; i < nuczZenkakuHankaku; ++i)
	{
		pciHankakuToZenkaku->AppendStrTrans(
			uczZenkakuHankaku[i][1],
			uczZenkakuHankaku[i][0]
			);
	}
}

//----------------------------------------------------------------------
//	InitHankakuToZenkakuKana()
//	例外は呼び出し側で処理すること。
//----------------------------------------------------------------------
void InitHankakuToZenkakuKana()
{
	int	i;

	if (pciHankakuToZenkakuKana != NULL)	return;
	pciHankakuToZenkakuKana	= new PCTransChar;

	for (i = 0; i < nZenkakuHankakuK; ++i)
	{
		pciHankakuToZenkakuKana->AppendCpTrans(ZenkakuHankakuK[i][1], ZenkakuHankakuK[i][0]);
	}

	for (i = 0; i < nuczZenkakuHankaku; ++i)
	{
		pciHankakuToZenkakuKana->AppendStrTrans(
			uczZenkakuHankaku[i][1],
			uczZenkakuHankaku[i][0]
			);
	}
}

//----------------------------------------------------------------------
//	InitWidthFolding()
//	例外は呼び出し側で処理すること。
//----------------------------------------------------------------------
void InitWidthFolding()
{
	int	i;

	if (pciWidthFolding != NULL)	return;
	pciWidthFolding	= new PCTransChar;

	for (i = 0; i < nZenkakuHankakuA; ++i)
	{
		if (ZenkakuHankakuA[i][0] < ZenkakuHankakuA[i][1])
		{
			pciWidthFolding->AppendCpTrans(ZenkakuHankakuA[i][1], ZenkakuHankakuA[i][0]);
		}
		else
		{
			pciWidthFolding->AppendCpTrans(ZenkakuHankakuA[i][0], ZenkakuHankakuA[i][1]);
		}
	}

	for (i = 0; i < nZenkakuHankakuK; ++i)
	{
		if (ZenkakuHankakuK[i][0] < ZenkakuHankakuK[i][1])
		{
			pciWidthFolding->AppendCpTrans(ZenkakuHankakuK[i][1], ZenkakuHankakuK[i][0]);
		}
		else
		{
			pciWidthFolding->AppendCpTrans(ZenkakuHankakuK[i][0], ZenkakuHankakuK[i][1]);
		}
	}

	for (i = 0; i < nuczZenkakuHankaku; ++i)
	{
		pciWidthFolding->AppendStrTrans(
			uczZenkakuHankaku[i][1],
			uczZenkakuHankaku[i][0]
			);
	}
}


//======================================================================
//	文字変換 (1)	ひらがなへ
//======================================================================
bool ToHiragana(T_STRING_U* pstrBuf, T_PCSTR_U pSrc, T_PCSTR_U pSrcE)
{
	InitKatakanaToHiragana();
	return pciKatakanaToHiragana->Translate(pstrBuf, pSrc, pSrcE);
}


//======================================================================
//	文字変換 (2)	カタカナへ
//======================================================================
bool ToKatakana(T_STRING_U* pstrBuf, T_PCSTR_U pSrc, T_PCSTR_U pSrcE)
{
	InitHiraganaToKatakana();
	return pciHiraganaToKatakana->Translate(pstrBuf, pSrc, pSrcE);
}

//======================================================================
//	文字変換 (3A)	全角へ
//======================================================================
bool ToZenkaku(T_STRING_U* pstrBuf, T_PCSTR_U pSrc, T_PCSTR_U pSrcE)
{
	InitHankakuToZenkaku();
	return pciHankakuToZenkaku->Translate(pstrBuf, pSrc, pSrcE);
}

//======================================================================
//	文字変換 (3K)	全角へ（カナのみ）
//======================================================================
bool ToZenkakuKana(T_STRING_U* pstrBuf, T_PCSTR_U pSrc, T_PCSTR_U pSrcE)
{
	InitHankakuToZenkakuKana();
	return pciHankakuToZenkakuKana->Translate(pstrBuf, pSrc, pSrcE);
}

//======================================================================
//	文字変換 (4)	半角へ
//======================================================================
bool ToHankaku(T_STRING_U* pstrBuf, T_PCSTR_U pSrc, T_PCSTR_U pSrcE)
{
	InitZenkakuToHankaku();
	return pciZenkakuToHankaku->Translate(pstrBuf, pSrc, pSrcE);
}

//======================================================================
//	文字変換 (5)	全角半角を区別しない比較用
//======================================================================
bool WidthFolding(T_STRING_U* pstrBuf, T_PCSTR_U pSrc, T_PCSTR_U pSrcE)
{
	InitWidthFolding();
	return pciWidthFolding->Translate(pstrBuf, pSrc, pSrcE);
}

//======================================================================
//	初期化と終了処理
//======================================================================
bool InitTrPreset()
{
	return true;
}

void CleanupTrPreset()
{
	delete	pciHiraganaToKatakana;
	delete	pciKatakanaToHiragana;
	delete	pciZenkakuToHankaku;
	delete	pciHankakuToZenkaku;
	delete	pciHankakuToZenkakuKana;
	delete	pciWidthFolding;
}

NS_PLIB_TEXTEX_END
